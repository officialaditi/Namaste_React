--> Q ) What is JSX?

JSX is HTML-like or XML-like syntax. JSX stands for JavaScript
XML. It's a syntax extension for JavaScript.

--> It is not a part of React. React apps can be built even
without JSX but the code will become very hard to read.
--> It is not HTML inside JavaScript.
--> JavaScript engine cannot understand JSX as it only
understands ECMAScript

// pure React

const heading = React.createElement('h1', {id: 'heading'}, 'Namaste React');

// using JSX

const heading = <h1>Namaste React</h1>

When we log heading and jsxHeading, it gives the same object.

_______________________________________________________________________________________________________________

                                             Introducing Babel

Babel is a JavaScript compiler, primarily used to convert modern JavaScript code (ECMAScript 2015+) 
into a backward-compatible version (ES5) that older browsers can understand, allowing developers to use 
the latest features without browser compatibility issues.

==> What it does:
Babel takes JavaScript code that uses newer syntax (like arrow functions, classes, and let/const) and 
transforms it into a format that older browsers can process. 

==> Why it's needed:
Not all browsers support the latest JavaScript features immediately. Babel bridges this gap by transpiling 
modern code into a widely compatible version. 

How it works:
--> Babel uses a plugin system to parse, transform, and generate JavaScript code. 
--> Parsing: Babel first parses the JavaScript code into an Abstract Syntax Tree (AST). 
--> Transformation: Plugins then traverse the AST and apply transformations to convert the code to a compatible 
version. 
--> Code Generation: Finally, Babel generates the transformed JavaScript code. 

Examples:
==> An ES6 arrow function () => {} is transformed into a traditional function function() {}. 
==> JSX syntax (like <div />) is converted to JavaScript function calls. 

_______________________________________________________________________________________________________________

Q ) What is the difference between HTML and JSX?

==> JSX is not HTML. It’s HTML-like syntax.
==> HTML uses ‘class’ property whereas JSX uses ‘className’ property
==> HTML can use hypens in property names whereas JSX uses camelCase syntax. 

_______________________________________________________________________________________________________________

                                            Introducing React Components

Everything inside React is a component.

Q ) What are Components?
There are 2 types of components:
1.Class-based Components - Old way of writing code, used rarely
in industry
2.Functional Components - New way of writing code, most commonly
used

Q ) What is a React Functional Components?
-> It is just a JavaScript Function that returns some JSX or a react element.
-> Always name React Functional Component with Capital Letters otherwise you will confuse it with normal function

// All are the same for single-line code
const HeadingComponent1 = () => (
 <h1>Namaste</h1>
)
const HeadingComponent2 = () => {
return <h1>Namaste</h1>
}

const HeadingComponent3 = () => <h1>Namaste</h1>

-> To render a functional component we call them ‘<Heading1 />’.
-> This is the syntax that Babel understands. 

_______________________________________________________________________________________________________________

                                          Components Composition

A component inside a component.

Calling a component inside another component is Component Composition. 

const Title = () => <h1>Namaste React</h1>
const HeadingComponent = () => (
<div id="container">
 <Title />
</div>
)

Code inside the ‘Title’ component will be used inside the ‘HeadingComponent’ component as the ‘Title’ component
is called inside it. It will become something like this,

const HeadingComponent = () => (
<div id="container">
 <h1>Namaste React</h1>
</div>
)

Q ) How to use JavaScript code inside JSX?
Inside a React Component when ‘{}’ parenthesis is present we can
write any JavaScript expression inside it.

const number = 10000;
const HeadingComponent = () => (
<div id="containter">
 {number}
 <h1>Namaste React</h1>
</div>
)

Q ) What will happen if we call 2 elements inside each other?
If we put 2 components inside each other, then it will go into an infinite loop and the stack will overflow. 
It will freeze your browser, so it’s not recommended to do so.

_______________________________________________________________________________________________________________

                                            Advantages of using JSX.

1) Sanitizes the data
--> If someone gets access to your JS code and sends some malicious data which will then get displayed on the 
screen, that attack is called cross-site scripting.
--> It can read cookies, local storage, session storage, get cookies, get info about your device, and read data. 
--> JSx takes care of your data.
--> If some API passes some malicious data JSX will escape it. It prevents cross-site scripting and sanitizes 
the data before rendering
2) Makes code readable
JSX makes it easier to write code as we are no longer creating elements using React.createElement()
3) Makes code simple and elegant
4) Show more useful errors and warnings
5) JSX prevents code injections (attacks)