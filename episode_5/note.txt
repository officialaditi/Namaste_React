                                  🛠️ React Project: File Structure and Hooks –

📁 Ideal Project Structure:-

To build a scalable and maintainable React app, it’s important to organize files properly. Below is a
suggested structure:

✅ Folder Structure Overview:

src/
├── components/       → All reusable UI components (e.g., Navbar, Footer, RestaurantCard)
│   ├── Navbar.jsx
│   ├── Footer.jsx
│   └── RestaurantCard.jsx
│
├── data/             → Static or mock data in JSON format
│   └── restaurantData.json
│
├── pages/            → Screens/pages that combine multiple components
│   ├── Home.jsx
│   └── About.jsx
│
├── utils/            → Helper utilities and constants
│   └── constants.js
│
├── App.js
└── index.js

_______________________________________________________________________________________________________________

🔧 utils -> folder /constants.js -> file

This file holds all the constants used throughout the application:

// utils/constants.js
export const LOGO_URL = "https://cdn.logo.com/logo.png";
export const BASE_API_URL = "https://api.example.com/restaurants";

🔰 You can import and use them like:

import { LOGO_URL } from "../utils/constants";

_______________________________________________________________________________________________________________

⚛️ React Superpowers: the Superpowers of react are they have efficient DOM manipulation

React shines at efficiently updating the DOM when the state changes. Without using useState, React doesn’t know 
when to re-render.

_______________________________________________________________________________________________________________

🪝 Introduction to React Hooks:-

What are Hooks?

Hooks are special functions in React that let you “hook into” React features like state and lifecycle methods.
They're just JavaScript functions, but very powerful.

🔥 Most Used Hooks

Hook	                        Purpose	Usage                                 Frequency
useState	               For managing local state inside a component	     ⭐⭐⭐⭐⭐
useEffect	               For handling side-effects (API calls, etc)	         ⭐⭐
Other Hooks 
(useRef, useContext, etc)  Rare use cases	                                      ⭐

_______________________________________________________________________________________________________________

🧠 useState Deep Dive:-

✅ Why use useState?

--> Creates a reactive state variable

--> Only re-renders the component where it's used

--> Useful when the UI should reflect the data/state

🚀 How to use useState

import { useState } from "react";

// normal variable
const listOfRestaurants = [];

// superpower variable (state variable)
const [listOfRestaurants, setListOfRestaurants] = useState([]);
Whatever is passed into useState() is the default value.

🔄 Updating the State
You use the setListOfRestaurants() function to update the state. When this function is called, React 
re-renders the UI automatically.

🧪 Example: Filtering Restaurants

import { useState } from "react";
import restaurantList from "../data/restaurantData.json";

const [listOfRestaurants, setListOfRestaurants] = useState(restaurantList);

const filterTopRatedRestaurants = () => {
  const filtered = listOfRestaurants.filter(res => res.data.avgRating >= 4);
  setListOfRestaurants(filtered);
};

🖼️ Mapping UI from State

<div className="body-container">
  {listOfRestaurants.map((restaurant) => (
    <RestaurantCard info={restaurant} key={restaurant.data.id} />
  ))}
</div>

Once you filter and update the state, the UI updates automatically, thanks to useState.

🤔 Question may arise?
 
 🔍 What is setListOfRestaurants?
 This is a setter function returned by the useState hook.

If you wrote:
const [listOfRestaurants, setListOfRestaurants] = useState([]);
Then:
--> listOfRestaurants → is the state variable that holds your current list of restaurants.
--> setListOfRestaurants → is the function that updates this state.

🎯 So What Does This Line Do? => setListOfRestaurants(filtered);
This updates the state listOfRestaurants with the new filtered data (filtered), which you probably got by 
doing something like:

const filtered = listOfRestaurants.filter(res => res.data.avgRating >= 4);

So now, listOfRestaurants holds only the top-rated restaurants.

⚛️ Why Is It Important?
Because you're using useState, React will now automatically re-render the component where listOfRestaurants is 
used—like in your .map() that renders cards:

{listOfRestaurants.map((restaurant) => (
  <RestaurantCard info={restaurant} key={restaurant.data.id} />
))}

So now your UI shows only the filtered restaurants.

note:- as soon as your data layer updates our UI layer updates.

AS SOON AS STATE CHANGES REACT RE-RENDER THE COMPONENTS:
_______________________________________________________________________________________________________________

📌 IMP NOTE:-

 - The crucial point about State variables is that whenever they update, React triggers a reconciliation
   cycle and re-renders the component. 

 - This means that as soon as the data layer changes, React promptly updates the UI layer. The data layer is
   always kept in sync with the UI layer.   

 - To achieve this rapid operation, React employs a reconciliation algorithm, also known as the diffing
   algorithm or React-Fibre    

_______________________________________________________________________________________________________________

🔺 Virtual Dom:-

Virtual dom is an light weight in-memory copy of the real dom, which help to update the UI by comparing the new
Virtual dom with the old real dom, and only update the necessary part of the real dom.

==> How does it work? 

--> When the state or props of a React component change, React creates a new virtual DOM tree. 
--> React then compares the new virtual DOM tree with the previous one to identify the differences. 
--> This process of comparing the two virtual DOM trees is called ["diffing"]. 
--> React then updates only the parts of the real DOM that have changed, minimizing the number of DOM 
    manipulations. 

🧠 React Algorithm = Diffing + Reconciliation

--> React uses something known as reconciliation algorithm, and this is also known as React Fibre.

◻ Diffing → Compare old vs new virtual DOM.

◻ Reconciliation → Efficiently update only the changed part in the real DOM.

_______________________________________________________________________________________________________________

📈 Why This is Fast?
The Real DOM is slow to update because it's connected to the browser UI. The Virtual DOM is just in memory (like a scratchpad), so it's super fast.

React: --> Minimizes the real DOM updates
       --> Makes your app feel smooth and responsive

_______________________________________________________________________________________________________________

🍕 Real-Life Analogy: Pizza Order:-

You placed a pizza order (initial render).

You want to change only the topping (state update).

Instead of re-baking the entire pizza, the chef just swaps the topping 🍄 → 🍍.

You get an updated pizza quickly.

That’s React’s efficiency in a nutshell.

_______________________________________________________________________________________________________________

🧠 What is React Fiber?

React Fiber is the new (and current) engine behind how React renders and updates the DOM.
It’s the core algorithm React uses to make your app fast, smooth, and responsive.

It was introduced in React 16, replacing the old "stack-based" algorithm.

💡 Why React Needed Fiber?
The old system was synchronous—which means once React started rendering, it couldn’t pause until it finished everything. This caused performance issues in large apps.

Fiber solves this with asynchronous rendering, allowing React to:

✅ Pause work
✅ Prioritize more important updates
✅ Reuse work
✅ Do things in chunks
             
             ****************************************************************************

⚙️ Think of Fiber Like This:
Imagine React is a chef 🍳 making a 5-course meal.

🧓 Old React:
The chef makes all 5 courses at once without stopping, even if a customer says they're in a rush for dessert.

⚡ Fiber React:
The chef now breaks down each course into steps, can pause, switch to the dessert first, and come back later.

That’s Fiber – smarter task management.

              ******************************************************************************

🧩 Key Features of React Fiber

    Feature	                                            What It Means
Incremental rendering	    ->         Do work in pieces instead of all at once
Prioritization	            ->         High-priority updates (like animations) go first
Concurrency	                ->         Multiple tasks can be worked on at the same time
Better error handling	    ->         More graceful handling of render errors
Suspense and Lazy Loading	->         Fiber enables powerful features like React.lazy and Suspense